#include "Application.hpp"
int main(int argc, char** argv) {
	AppMode mode;
	if (argc == 1) mode = AppTest;
	else {
		switch (argv[1][0]) {
		case 't':
			mode = AppTest; break;
		case 'r':
			mode = AppRandom; break;
		case 'c':
			mode = AppCustom; break;
		}
	}
	Application app(mode);
	return app.run();
}
#ifndef __WANDERER__
#define __WANDERER__

#include "../../util/Config.hpp"
#include "../../util/Context.hpp"
#include "../../random_generators/RandomNumberGenerator.hpp"
#include "../bricks/Movable.hpp"
#include "../bricks/Entity.hpp"
#include "MovableBehavior.hpp"
#include "../../util/vec2.hpp"
#include <SDL2/SDL.h>
#include <random>

class Wanderer : public MovableBehavior {

public:
	Wanderer(Entity* e);
	
	void behave(Context& ctx) override;

private:
	void change_dir();
	
	int target_changer = 0;
	
	inline static const vec2f default_size = vec2f(30, 30);
	inline static const SDL_Color default_color = SDL_Color { 0, 255, 0, 255 };
	inline static RandomNumberGenerator dir_duration_gen = RandomNumberGenerator(0, 100);
};

#endif
#ifndef __BEHAVIOR__
#define __BEHAVIOR__

#include "../bricks/Entity.hpp"
#include "../bricks/Movable.hpp"
#include "../../util/Context.hpp"

class Behavior {

public:
	virtual void behave(Context& ctx) = 0;
	virtual ~Behavior() = default;

protected:
	Behavior(Entity* e) : e(e) {}
	
	Entity* e;
};



#endif // __BEHAVIOR__
#ifndef __DETECTOR_BEHEVIOR__
#define __DETECTOR_BEHEVIOR__

#include "../bricks/Detector.hpp"
#include "Behavior.hpp"
#include "../bricks/Entity.hpp"
#include "../../util/Context.hpp"

class DetectorBehavior : public Behavior {

public:

	DetectorBehavior(Entity* e);
	void behave(Context& ctx) override;

private:
	Detector* e;
};


#endif // __DETECTOR_BEHEVIOR__

#ifndef __MOVABLE_BEHAVIOR__
#define __MOVABLE_BEHAVIOR__

#include "Behavior.hpp"
#include "../bricks/Entity.hpp"
#include "../bricks/Movable.hpp"
#include <iostream>

class MovableBehavior : public Behavior {

public:
	virtual ~MovableBehavior() = default;

protected:
	MovableBehavior(Entity* e)
        : Behavior(e) {
		this->e = dynamic_cast<Movable*>(e);
        if (!this->e)
            throw std::runtime_error("WanderBehavior requires a Movable entity");
	}
	
	Movable* e;
};



#endif // __MOVABLE_BEHAVIOR__
#include "Wanderer.hpp"
#include <iostream>

Wanderer::Wanderer(Entity* e)
        : MovableBehavior(e) {}

void Wanderer::change_dir() {
	int new_dir = e->get_config().random_dir();
	e->go_to_by_dir(new_dir);
	target_changer = dir_duration_gen.random_number();
}

void Wanderer::behave(Context& ctx) {
	if (this->target_changer -- == 0 || !e->is_mobile()) change_dir();	
}

#include "DetectorBehavior.hpp"
#include <iostream>
#include "../bricks/Detector.hpp"

DetectorBehavior::DetectorBehavior(Entity* e)
	: Behavior(e) {
	this->e = dynamic_cast<Detector*>(e);
	if (!this->e)
		throw std::runtime_error("WanderBehavior requires a Movable entity");

}

void DetectorBehavior::behave(Context& ctx) {
	for (auto& e : ctx.entities) 
		e->accept(this->e);
}

void Detector::check(Antelope& e) {}

void Detector::check(Lion& e) {}
#ifndef __ANTELOPE__
#define __ANTELOPE__

#include <optional>
#include "../bricks/Movable.hpp"
#include "../bricks/Detector.hpp"
#include "../behaviors/Wanderer.hpp"
#include "../../util/vec2.hpp"

class Antelope : public Movable, public Detector {

public:
	Antelope(Config& config, vec2f pos);
	
	void process(Context& ctx) override;
	void init_behaviors() override;

	void accept(Detector* visitor) override;

private:
	inline static const vec2f size = vec2f(40, 40);
	inline static const float speed = 4.0;
	inline static const float sight_range = 200;

protected:
	
};



#endif // __ANTELOPE__
#ifndef __LION__
#define __LION__

#include "../bricks/Movable.hpp"
#include "../bricks/Detector.hpp"
#include "../behaviors/Wanderer.hpp"
#include "../../util/vec2.hpp"

class Antelope;

class Lion : public Movable, public Detector {

public:
	Lion(Config& config, vec2f pos);
	
	void process(Context& ctx) override;
	void init_behaviors() override;

	void accept(Detector* visitor) override;
	
private:	
	
	inline static const vec2f size = vec2f(40, 40);
	inline static const int speed = 4;
	inline static const float sight_range = 300;

protected:
	
};



#endif // __LION__
#include "Lion.hpp"
#include "Antelope.hpp"
#include "../behaviors/Wanderer.hpp"

Lion::Lion(Config& config, vec2f pos):
	Movable(config, pos, size, speed, SDL_Color {255, 0, 0, 255}) {
}


void Lion::process(Context& ctx) {
	Movable::process(ctx);
}

void Lion::accept(Detector* visitor) {
	visitor->check(*this);
}

void Lion::init_behaviors() {
    add_behavior<Wanderer>(this);
}
#include "Lion.hpp"
#include "Antelope.hpp"
#include "../behaviors/Wanderer.hpp"

Antelope::Antelope(Config& config, vec2f pos):
	Movable(config, pos, size, speed, SDL_Color {0, 255, 0, 255}) {
}


void Antelope::process(Context& ctx) {	
	Movable::process(ctx);
}

void Antelope::accept(Detector* visitor) {
	visitor->check(*this);
}


void Antelope::init_behaviors() {
    add_behavior<Wanderer>(this);
}
#include "Movable.hpp"

Movable::Movable(Config& config, vec2f pos, vec2f size, float speed, SDL_Color color) :
	Entity(config, pos, size, color), speed(speed) {}

Movable::Movable(Config& config, vec2f pos, vec2f size, float speed, SDL_Renderer* ren, std::string sprite_path) :
	Entity(config, pos, size, ren, sprite_path), speed(speed) {}

void Movable::process(Context& ctx) {
	vec2f new_pos;
	switch (movement.tag) {
	case MovementByTarget:
		new_pos = pos.move_towards(movement.data.target, speed); break;
	case MovementByDir:
		new_pos = pos.moved_at_angle(movement.data.dir, speed); break;
	case MovementStatic:
		new_pos = pos; break;
	}
	if (config.is_valid_pos(new_pos)) 
		this->pos = new_pos;
	
	Entity::process(ctx);
}


void Movable::go_to_by_dir(int dir) {
	movement.data.dir = dir;
	movement.tag = MovementByDir;
}


void Movable::go_to_by_target(vec2f target) {
	movement.data.target = target;
	movement.tag = MovementByTarget;
}


bool Movable::is_mobile() {
	switch (movement.tag) {
	case MovementByTarget:
		return pos != movement.data.target;
	case MovementStatic:
		return false;
	case MovementByDir:
		return true;
	}
	fprintf(stderr, "Invalid move tag\n");
	exit(1);
}
#ifndef __ENTITY_H__
#define __ENTITY_H__
#include <SDL2/SDL.h>
#include "../../util/vec2.hpp"
#include "../../util/Config.hpp"
#include "../../util/Context.hpp"
#include <string>
#include <vector>
#include <memory>

class Detector;
class Behavior;

class Entity {

public:
	Entity() = delete;
	
	virtual ~Entity();
	virtual void process(Context& ctx);
	virtual void render(SDL_Renderer* ren);
	virtual void init_behaviors();

	
	virtual void accept(Detector* visitor) = 0;

	vec2f get_pos() const;
	vec2f get_size() const;
	Config& get_config() const;
	
protected:
	Entity(Config& config, vec2f pos, vec2f size, SDL_Color color);
	Entity(Config& config, vec2f pos, vec2f size, SDL_Renderer* ren, std::string sprite_path);

	template<typename T, typename... Args>
	void add_behavior(Args&&... args) {
		behaviors.push_back(std::make_unique<T>(std::forward<Args>(args)...));
	}

	
	SDL_Color color;
	SDL_Texture* sprite;
	vec2f pos;
	vec2f size;

	Config& config;
	std::vector<std::unique_ptr<Behavior>> behaviors;
	

};


#endif
#ifndef __DETECTOR__
#define __DETECTOR__

#include "Entity.hpp"

class Antelope;
class Lion;

class Detector : public Entity {

public:
	Antelope* antelop_detected = nullptr;
	Lion* lion_detected = nullptr;

	void check(Antelope& e);
	void check(Lion& e);

};


#endif // __DETECTOR__
#ifndef __MOVABLE_H__
#define __MOVABLE_H__
#include <SDL2/SDL.h>
#include "../../util/vec2.hpp"
#include "Entity.hpp"
#include "../../util/Config.hpp"
#include <string>

enum MovementType {
	MovementByTarget,
	MovementByDir,
	MovementStatic
};

struct Movement {
	MovementType tag;
	union {
		int dir;
		vec2f target;
	} data;
};

class Movable : public Entity {

public:
	Movable() = delete;
	
	virtual void process(Context& ctx) override;

	void go_to_by_target(vec2f pos);	
	void go_to_by_dir(int dir);	
	bool is_mobile();	

protected:
	Movable(Config& config, vec2f pos, vec2f size, float speed, SDL_Color color);
	Movable(Config& config, vec2f pos, vec2f size, float speed, SDL_Renderer* ren, std::string sprite_path);


	Movement movement = {
		.tag = MovementStatic,
		.data = {}
	};

	float speed;
};


#endif
#include "Entity.hpp"
#include "../behaviors/Behavior.hpp"
#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <string>


Entity::Entity(Config& config, vec2f pos, vec2f size, SDL_Color color)
    : color(color), sprite(nullptr), pos(pos), size(size) , config(config) {}


Entity::Entity(Config& config, vec2f pos, vec2f size, SDL_Renderer* ren, std::string sprite_path)
    : pos(pos), size(size), config(config) {
	SDL_Surface* surface = IMG_Load(sprite_path.c_str());
    if (!surface) {
		SDL_Log("IMG_Load failed: %s", IMG_GetError());
		this->sprite = nullptr;
		return;
	}
    this->sprite = SDL_CreateTextureFromSurface(ren, surface);
    SDL_FreeSurface(surface);

}

Entity::~Entity() {
	if (this->sprite) SDL_DestroyTexture(this->sprite);
}

void Entity::process(Context& ctx) {
	for (auto& b : behaviors)
		b->behave(ctx);
}

void Entity::render(SDL_Renderer* ren) {	
	SDL_FRect rect = SDL_FRect {
		.x = this->pos.x,
		.y = this->pos.y,
		.w = this->size.x,
		.h = this->size.y,
	};

	if (!this->sprite) {
		SDL_SetRenderDrawColor(ren, this->color.r, this->color.g, this->color.b, this->color.a);
		SDL_RenderDrawRectF(ren, &rect);
	} else 
		SDL_RenderCopyF(ren, this->sprite, NULL, &rect);
}

vec2f Entity::get_pos() const {
	return this->pos;
}

vec2f Entity::get_size() const {
	return this->size;
}

Config& Entity::get_config() const {
	return this->config;
}

void Entity::init_behaviors() {}
#ifndef __CONFIG__
#define __CONFIG__

#include "vec2.hpp"
#include "../random_generators/RandomNumberGenerator.hpp"
#include "../random_generators/RandomPositionGenerator.hpp"

class Config {
	
public:
	Config(vec2i map_dim)
		: map_dim(map_dim), posgen(map_dim), dirgen(0, 360) {}

	const vec2i map_dim;

	int random_dir() {
		return dirgen.random_number();
	}
	
	vec2f random_pos() {
		return posgen.random_position();
	}

	bool is_valid_pos(vec2f pos) {
		return pos.x < map_dim.x && pos.y < map_dim.y && pos.x >= 0 && pos.y >= 0;
	}

private:
	RandomPositionGenerator posgen;
	RandomNumberGenerator dirgen;	
};


#endif
#ifndef __CONTEXT__
#define __CONTEXT__

#include <vector>
#include <memory>

class Entity;

class Context {

public:
	Context(std::vector<std::unique_ptr<Entity>>& entities) : entities(entities) {}
	
	std::vector<std::unique_ptr<Entity>>& entities;
	
};


#endif // __CONTEXT__
#ifndef VEC2_H
#define VEC2_H

#include <cmath>
#include <type_traits>

template <class T>
class vec2 {
public:
	T x{}, y{};

	constexpr vec2() = default;
	constexpr vec2(T x, T y) : x(x), y(y) {}
	constexpr vec2(const vec2& v) = default;
	vec2& operator=(const vec2& v) = default;

	constexpr vec2 operator+(const vec2& v) const { return {x + v.x, y + v.y}; }
	constexpr vec2 operator-(const vec2& v) const { return {x - v.x, y - v.y}; }
	constexpr bool operator==(const vec2& v) const { return x == v.x && y == v.y; }
	constexpr bool operator!=(const vec2& v) const { return x != v.x || y != v.y; }

	vec2& operator+=(const vec2& v) { x += v.x; y += v.y; return *this; }
	vec2& operator-=(const vec2& v) { x -= v.x; y -= v.y; return *this; }

	constexpr vec2 operator+(T s) const { return {x + s, y + s}; }
	constexpr vec2 operator-(T s) const { return {x - s, y - s}; }
	constexpr vec2 operator*(T s) const { return {x * s, y * s}; }
	constexpr vec2 operator/(T s) const { return {x / s, y / s}; }

	vec2& operator+=(T s) { x += s; y += s; return *this; }
	vec2& operator-=(T s) { x -= s; y -= s; return *this; }
	vec2& operator*=(T s) { x *= s; y *= s; return *this; }
	vec2& operator/=(T s) { x /= s; y /= s; return *this; }

	void set(T x_, T y_) { x = x_; y = y_; }

	void rotate(T deg) {
		T theta = deg / T(180.0) * T(M_PI);
		T c = std::cos(theta);
		T s = std::sin(theta);
		T tx = x * c - y * s;
		T ty = x * s + y * c;
		x = tx;
		y = ty;
	}

	vec2 moved_at_angle(T angle_deg, T distance) const {
		double angle_rad = angle_deg * M_PI / 180.0;
		T dx = static_cast<T>(std::cos(angle_rad) * distance);
		T dy = static_cast<T>(std::sin(angle_rad) * distance);
		return vec2(x + dx, y + dy);
	}

	vec2 normalize_to(const vec2& target, T distance) const {
		return {(target.x - x) / distance, (target.y - y) / distance};
	}

	T dist(const vec2& v) const {
		T dx = v.x - x;
		T dy = v.y - y;
		return std::sqrt(dx * dx + dy * dy);
	}

	T length() const {
		return std::sqrt(x * x + y * y);
	}

	void truncate(T len) {
		T angle = std::atan2(y, x);
		x = len * std::cos(angle);
		y = len * std::sin(angle);
	}

	vec2 ortho() const {
		return {y, -x};
	}

	static constexpr T dot(const vec2& v1, const vec2& v2) {
		return v1.x * v2.x + v1.y * v2.y;
	}

	static constexpr T cross(const vec2& v1, const vec2& v2) {
		return v1.x * v2.y - v1.y * v2.x;
	}

	vec2 move_towards(const vec2& dest, T speed) const {
		T d = dist(dest);
		if (d > speed) {
			vec2 dir = normalize_to(dest, d);
			return *this + dir * speed;
		} else {
			return dest;
		}
	}
};

using vec2f = vec2<float>;
using vec2d = vec2<double>;
using vec2i = vec2<int>;

#endif // VEC2_H

#ifndef __RANDOM_NUMBER_GENERATOR__
#define __RANDOM_NUMBER_GENERATOR__

#include <random>
#include "../util/vec2.hpp"

class RandomNumberGenerator {
public:
    RandomNumberGenerator(int min, int max, unsigned seed = std::random_device{}())
        :  gen(seed), dist(min, max) {}

    int random_number() {
        return dist(gen);
    }

private:
    std::mt19937 gen;
    std::uniform_int_distribution<> dist;
};

#endif // __RANDOM_POSITION_GENERATOR__
#ifndef __RANDOM_POSITION_GENERATOR__
#define __RANDOM_POSITION_GENERATOR__

#include <random>
#include "../util/vec2.hpp"

class RandomPositionGenerator {
public:
    RandomPositionGenerator(vec2i d, unsigned seed = std::random_device{}())
        :  gen(seed), dist_x(0, d.x - 1), dist_y(0, d.y - 1) {}

    vec2f random_position() {
        return vec2f(dist_x(gen), dist_y(gen));
    }

private:
    std::mt19937 gen;
    std::uniform_int_distribution<> dist_x;
    std::uniform_int_distribution<> dist_y;
};

#endif // __RANDOM_POSITION_GENERATOR__
#include "Application.hpp"
#include "actors/species/Antelope.hpp"
#include "actors/species/Lion.hpp"
#include <SDL2/SDL.h>


Application::Application(AppMode mode) :
    config(Config(vec2(M_WIDTH, M_HEIGHT))){

	if (SDL_Init(SDL_INIT_VIDEO)) {
		fprintf(stderr, "Failed to init SDL\n");
		return;
	}
	this->win = SDL_CreateWindow(WINDOW_TITLE, 100, 100, config.map_dim.x, config.map_dim.y, 0);
	if (!this->win) {
		fprintf(stderr, "Failed to init Window\n");
		return;
	}
	this->ren = SDL_CreateRenderer(this->win, 0, 0);
	if (!this->ren) {
		fprintf(stderr, "Failed to init ren\n");
		return;
	}
	switch (mode) {
	case AppTest:
		test_init(); break;
	case AppRandom:
		fprintf(stderr, "AppRandom is not ready"); exit(1);
	case AppCustom:
		fprintf(stderr, "AppCustom is not ready"); exit(1);

	}	
}

void Application::test_init() {
	for (int i = 0; i < 10; i++) 
		entities.push_back(std::make_unique<Antelope>(config, config.random_pos()));
	for (int i = 0; i < 10; i++) 
		entities.push_back(std::make_unique<Lion>(config, config.random_pos()));

	for (auto& e: entities) e->init_behaviors();
}

const int TARGET_FPS = 60;
const int FRAME_DELAY_MS = 1000 / TARGET_FPS;

int Application::run() {
	this->running = true;
	while (this->is_running()) {
		Uint32 frame_start = SDL_GetTicks();
		
		this->process();
		this->render();
		
		Uint32 frame_time = SDL_GetTicks() - frame_start;
		if (frame_time < FRAME_DELAY_MS) SDL_Delay(FRAME_DELAY_MS - frame_time); 
	}
	
	return 0;

}

bool Application::is_running() const {
	return this->running;
}

void Application::stop() {
	this->running = false;
}


void Application::process() {
	SDL_Event e;
	while (SDL_PollEvent(&e)) {
		switch (e.type) {
		case SDL_QUIT:
			this->stop(); break;
		default:;
		}
	}
	Context ctx(entities);
	for (auto& e : entities) e->process(ctx);
}

void Application::render() {
	SDL_SetRenderDrawColor(this->ren, BG_COLOR);
	SDL_RenderClear(this->ren);
	for (auto& e: entities) e->render(this->ren);
	SDL_RenderPresent(this->ren);
}

Application::~Application() {
	if (this->win) SDL_DestroyWindow(this->win);
	if (this->ren) SDL_DestroyRenderer(this->ren);
}

#ifndef APPLICATION_HPP
#define APPLICATION_HPP

#define WINDOW_TITLE "Stam"
#define BG_COLOR 150, 150, 150, 255

#include <memory> 
#include <vector>
#include <SDL2/SDL.h>
#include "actors/bricks/Entity.hpp"
#include "random_generators/RandomPositionGenerator.hpp"
#include "util/Config.hpp"
#include "util/Context.hpp"

#define M_WIDTH 900
#define M_HEIGHT 600

enum AppMode {
	AppTest,
	AppRandom,
	AppCustom
};

class Application {

public:
	Application(AppMode mode);
	~Application();

	void test_init();
	
	int run();
	bool is_running() const;
	void stop();
	
private:
	void process();
	void render();
	
	std::vector<std::unique_ptr<Entity>> entities;

	Config config;
	
	bool running = false;
	SDL_Window* win = 0;
	SDL_Renderer* ren = 0;

};


#endif
